---
layout: post
title:  "weekly report"
date:   2022-05-22 22:30:08 +0800
categories: weeklyreport
---

# 读书

这周还是继续读 Understanding Linux Network Internals 这本书, 第三章主要介绍的是 userspace 与 kernel 之间的接口. 除了操作系统提供的指令之外, 还存在三个接口用于 kernel 与 userspace 之间的信息传递. procfs(/proc), sysctl(/proc/sys), sysfs(/sys) 

首先便是 /proc 下的文件,这本身是一个虚拟文件系统, /proc 下的文件并不实际存在磁盘上. 它是由代码中的数据结构之间的关系组成的一个树形目录结构. 这些文件是由 kernel 生成的. 即使是作为 root 用户也无法在/proc 目录下创建文件. 这个目录主要暴露了 kernel 的信息, 用户可以读取或者修改这些文件来与 kernel 交互

然后是 /proc/sys 文件下的文件, 这个目录主要暴露了 kernel 对外暴露的变量, 同样可以通过 sysctl 命令来控制

最后是 /sys, 这个目录是自 linux 2.6 内核以后才引入的, 作为一种新的暴露内核基本信息的方式被提出来.


这一章比较简介, 所介绍的只是这三个目录的基本结构和生成方式, 让我比较惊讶的这一点是这些目录/文件并不实际存在于硬盘上. 并且生成这些文件的方式(树形结构体)也十分有借鉴意义. 后续生成相同的目录结构可以考虑在代码中定义相同的结构体来生成. 这一章有个 ioctl 的例子没有太看懂它的图解. 等到后续章节详细介绍的时候再研究一下吧


# 日常

### cgroups 限制

这周听了一下 kata 容器的讲座, 在容器安全日益重要的今天,我预计未来这部分一定会成为主流, 尽管目前它还没有一个完整的标准. 但是相关性能指标已经接近 runc 容器了. 并且还可以提供 cgroups 无法提供的隔离性. 比如, 正常的 cgroups 是无法隔离软中断的, 如果一个网关类型的 pod 突发大量网络流量. 那么调度到这台 ecs 的其他容器的网络收发报同样会受到影响,这个还是一个比较严重的事情(除非在 ecs/物理机 层面进行隔离). 但是感觉现在 kata 没有 gVisor 的架构清晰漂亮(尽管性能上还是有一定的差距)

