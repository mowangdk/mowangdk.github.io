---
layout: post
title:  "k8s pod 启动时间过长分析"
date:   2022-07-10 22:30:08 +0800
categories: blog
---

### 背景
前些天遇到了一个 pod 启动过慢的问题, 把排查流程记录一下(顺便水一篇文章

### 起因
在边缘节点启动应用 pod 耗时时间非常长, 达到了一分钟. 并且每次重新启动的时候都是正好一分钟. 这并不是一个正常的 golang 程序的启动时间, 毕竟编译完的golang 程序只有一个二进制而已,不存在什么 jvm 之类的虚拟机,按理说不会这么慢.

### 排查
- 首先便是怀疑在入口函数做了什么耗时的操作.
于是在 main 函数的第一行加上了 log 进行排查, 即使是第一行也耗时了 1min
- 然后怀疑是在 init 函数中做了什么操作
于是查找了所有的 init 方法, 依旧没有查到什么耗时的操作. 所以 init 函数耗时的这一条路也走不通了
- 没办法只能祭出 strace
使用 strace 来跟踪应用进程, 查看具体是什么耗时, 答案很快就出来了.
![](/assets/img/strace.png)
搞了半天是因为进程在初始化的时候一直访问 100.100.100.200. 然后一直访问不到. 进而不断重试.最终一直重试了一分钟导致的.
- 那么问题又来了, 是代码中什么地方访问的呢? 
我们已经检查过 main 函数的入口以及所有 init 函数.并没有发现访问 100.100.100.200 地址的地方.
- ok, 为了解决这个问题,我们必须要找到相应的调用栈才行
于是, 我们在前台手动运行这个进程, 并且在一分钟之内使用 [control + '\\'] 来终止程序. 果然把当前进程的所有调用栈都打出来了
- 随着调用栈看去, 发现这个访问 100.100.100.200 的代码居然是在全局变量里面. 定位到最后没想到是被全局变量给拖累了

### 结论
其实就是一次简单的启动时间排查, 一开始 init 想到了但是却没有想到全局变量, 如果想到了全局变量这层,可能就不需要继续使用 strace 之类的工具来定位了