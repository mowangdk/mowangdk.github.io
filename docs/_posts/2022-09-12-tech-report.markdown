---
layout: post
title:  "weekly report"
date:   2022-09-12 22:30:08 +0800
categories: weeklyreport
---

# 读书

### 论文

https://www.usenix.org/conference/osdi22/presentation/zhong

还是这篇论文, 这周大概看了一半左右, 总之原理就是通过在内核中提供的 NVMe 协议里面加的 ebpf hook 接口为 NVMe 添加 resubmission 功能. 这个功能主要是为了降低文件系统到驱动层的软件消耗(在 ssd 时代,这种软件消耗已经占用了整个 io 流程的一半时间). 所谓的 submission 流程就是, 当驱动完成某一个 io, 这时候会发生一个 complete 中断,用于调用中断处理函数, 这时候 nvme driver ebpf 会检查是否还有下一个 io 请求, 如果存在的话,直接向 nvme driver 重新 submit 下一个 nvme command(io), 而不是直接返回给文件系统层(期间经过 blocklayer, filesystem, syscall). 但是这个 resubmit 需要很多信息, 比如文件系统的逻辑地址和块设备的物理地址是需要文件系统和块设备经过转换的. 我们在底层无法得知这层信息, 也就意味着我们无法获取下一个 io 请求的物理地址. (还在继续看, 这周也处于摸鱼状态)


### 大话存储

看到多抓鱼上有这本书, 就买了. 没想到超出我预想的厚度和内容.姑且也是一步一步开始啃了, 一开始是 机械磁盘的解构, 解释的非常详细, ,解决了我之前一直疑惑的一些点, 比如是否每个盘面的磁头都在同时读取数据(没有, 多个磁头都是分时系统). 磁盘的寻道(磁道)方式, 用那种方法最好等等. 十分推荐有兴趣往存储方向发展的同学读一读. 回头我会将它的内容总结出几篇文章, 存储小组内分享一下

# 日常

### loopdevice

本周跟内核团队的同学聊了一下 lvm, 不过没想到扯上了 loopdevice, 据他们的意见是, loopdevice 基本上可以做到 lvm 做到的事情, 并且比 lvm 有着更好的可扩展性. 我们可以通过 losetup 命令来操作 loopdevice 设备, 每一个 loopdevice 设备都会关联一个实际在磁盘上的文件, 我们可以规定这个磁盘的大小和写入效率等一系列东西.


### sparefile

同样也是本周调研的时候发现的一个新玩意, 它可以将用户数据中的 0 都累积下来.用代数来代表(而不是实际存储在硬盘上). 这样我们可以节省很大的一块磁盘开销,也就是所谓的稀疏文件


### 关于 golang exec.Command 方法
这个方法第一个参数一般都是命令, 我们不能把参数全部拼接到第一个参数的 cmd 里面, 他会把整个字符串当成一个二进制. 从而发生无法在$PATH 里面找到文件的问题. (好像之前就遇到过这个问题,一直在卡. 没想到在同一个石头上摔了不止一次